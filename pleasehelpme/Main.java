import java.util.*;import java.io.*;public class Main{ //tried my best to make this extra readable    public static void main(String[] args) throws IOException {        // TODO Auto-generated method stub        Scanner sc = new Scanner(System.in);                Queue<Integer> queue = new LinkedList<>();        List<Integer>[] adj = new ArrayList[13];        List<Integer>[] stairs = new ArrayList[13];        long[] step = new long[13];        long[] weight = new long[13];        int[] parent = new int[13]; //for backtracking to find the path                for(int i = 1; i <= 12; i++) {        	adj[i] = new ArrayList<>();        	stairs[i] = new ArrayList<>();        	step[i] = Long.MAX_VALUE;        	parent[i] = i;        }                //floors        adj[1].add(3);        adj[1].add(8);                adj[2].add(3);                adj[3].add(2);        adj[3].add(4);        adj[3].add(1);                adj[4].add(5);        adj[4].add(3);        adj[4].add(6);        adj[4].add(7);        adj[4].add(8);                adj[5].add(4);                adj[6].add(4);                adj[7].add(4);                adj[8].add(4);        adj[8].add(1);                adj[9].add(10);        adj[9].add(12);                adj[10].add(9);        adj[10].add(11);                adj[11].add(10);        adj[11].add(12);                adj[12].add(9);        adj[12].add(11);                //stairs        stairs[1].add(9);        stairs[1].add(12);        stairs[3].add(10);                stairs[6].add(10);                stairs[4].add(11);        stairs[4].add(12);                stairs[8].add(11);        stairs[8].add(12);        stairs[8].add(9);                stairs[9].add(1);        stairs[9].add(8);                stairs[10].add(3);        stairs[10].add(3);                stairs[11].add(4);        stairs[11].add(8);                stairs[12].add(8);        stairs[12].add(1);                          int src = sc.nextInt(), dest = sc.nextInt();        for(int i = 1; i <= 12; i++) {        	long K = Long.parseLong(sc.next());        	weight[i] = K;        }                        queue.add(src);        step[src] = weight[src];        while(!queue.isEmpty()) {        	int cur = queue.poll();        	        	for(int next : adj[cur]) {        		if(step[cur] + weight[next] < step[next]) {        			step[next] = step[cur] + weight[next];        			parent[next] = cur;        			queue.add(next);        		}        	}        	        	for(int next : stairs[cur]) {        		if(step[cur] + weight[next] < step[next]) {        			step[next] = step[cur] + weight[next];        			parent[next] = cur;        			queue.add(next);        		}        	}        }                Deque<Integer> ans = new LinkedList<>();        int cur = dest;         while(parent[cur] != cur) {        	ans.add(cur);        	cur = parent[cur];        }        ans.add(cur);                while(!ans.isEmpty()) {        	System.out.println(ans.pollLast());        }    }}